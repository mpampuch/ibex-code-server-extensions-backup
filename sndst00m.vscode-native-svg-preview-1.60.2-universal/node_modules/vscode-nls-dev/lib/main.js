/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
'use strict';
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareJsonFiles = exports.pullXlfFiles = exports.pushXlfFiles = exports.createXlfFiles = exports.XLF = exports.Line = exports.createKeyValuePairFile = exports.debug = exports.bundleLanguageFiles = exports.createAdditionalLanguageFiles = exports.bundleMetaDataFiles = exports.createMetaDataFiles = exports.rewriteLocalizeCalls = void 0;
var event_stream_1 = require("event-stream");
var https = require("https");
var Is = require("is");
var path = require("path");
var xml2js = require("xml2js");
var lib_1 = require("./lib");
var File = require("vinyl");
var fancyLog = require("fancy-log");
var ansiColors = require("ansi-colors");
function log(message) {
    var rest = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        rest[_i - 1] = arguments[_i];
    }
    fancyLog.apply(void 0, __spreadArrays([ansiColors.cyan('[i18n]'), message], rest));
}
var NLS_JSON = '.nls.json';
var NLS_METADATA_JSON = '.nls.metadata.json';
var I18N_JSON = '.i18n.json';
function rewriteLocalizeCalls() {
    return event_stream_1.through(function (file) {
        if (!file.isBuffer()) {
            this.emit('error', "Failed to read file: " + file.relative);
            return;
        }
        var buffer = file.contents;
        var content = buffer.toString('utf8');
        var sourceMap = file.sourceMap;
        var result = lib_1.processFile(content, undefined, sourceMap);
        var messagesFile;
        var metaDataFile;
        if (result.errors && result.errors.length > 0) {
            result.errors.forEach(function (error) { return console.error("" + file.relative + error); });
            this.emit('error', "Failed to rewrite file: " + file.path);
            return;
        }
        else {
            if (result.contents) {
                file.contents = new Buffer(result.contents, 'utf8');
            }
            if (result.sourceMap) {
                file.sourceMap = JSON.parse(result.sourceMap);
            }
            if (result.bundle) {
                var ext = path.extname(file.path);
                var filePath = file.path.substr(0, file.path.length - ext.length);
                messagesFile = new File({
                    base: file.base,
                    path: filePath + NLS_JSON,
                    contents: new Buffer(JSON.stringify(result.bundle.messages, null, '\t'), 'utf8')
                });
                var metaDataContent = Object.assign({}, result.bundle, { filePath: lib_1.removePathPrefix(filePath, file.base) });
                metaDataFile = new File({
                    base: file.base,
                    path: filePath + NLS_METADATA_JSON,
                    contents: new Buffer(JSON.stringify(metaDataContent, null, '\t'), 'utf8')
                });
            }
        }
        this.queue(file);
        if (messagesFile) {
            this.queue(messagesFile);
        }
        if (metaDataFile) {
            this.queue(metaDataFile);
        }
    });
}
exports.rewriteLocalizeCalls = rewriteLocalizeCalls;
function createMetaDataFiles() {
    return event_stream_1.through(function (file) {
        if (!file.isBuffer()) {
            this.emit('error', "Failed to read file: " + file.relative);
            return;
        }
        var result = lib_1.processFile(file.contents.toString('utf8'), undefined, undefined);
        if (result.errors && result.errors.length > 0) {
            result.errors.forEach(function (error) { return console.error("" + file.relative + error); });
            this.emit('error', "Failed to rewrite file: " + file.path);
            return;
        }
        // emit the input file as-is
        this.queue(file);
        // emit nls meta data if available
        if (result.bundle) {
            var ext = path.extname(file.path);
            var filePath = file.path.substr(0, file.path.length - ext.length);
            this.queue(new File({
                base: file.base,
                path: filePath + NLS_JSON,
                contents: new Buffer(JSON.stringify(result.bundle.messages, null, '\t'), 'utf8')
            }));
            var metaDataContent = Object.assign({}, result.bundle, { filePath: lib_1.removePathPrefix(filePath, file.base) });
            this.queue(new File({
                base: file.base,
                path: filePath + NLS_METADATA_JSON,
                contents: new Buffer(JSON.stringify(metaDataContent, null, '\t'), 'utf8')
            }));
        }
    });
}
exports.createMetaDataFiles = createMetaDataFiles;
function bundleMetaDataFiles(id, outDir) {
    var base = undefined;
    var bundler = new lib_1.MetaDataBundler(id, outDir);
    return event_stream_1.through(function (file) {
        var basename = path.basename(file.relative);
        if (basename.length < NLS_METADATA_JSON.length || NLS_METADATA_JSON !== basename.substr(basename.length - NLS_METADATA_JSON.length)) {
            this.queue(file);
            return;
        }
        if (file.isBuffer()) {
            if (!base) {
                base = file.base;
            }
        }
        else {
            this.emit('error', "Failed to bundle file: " + file.relative);
            return;
        }
        if (!base) {
            base = file.base;
        }
        var buffer = file.contents;
        var json = JSON.parse(buffer.toString('utf8'));
        bundler.add(json);
    }, function () {
        if (base) {
            var _a = bundler.bundle(), header = _a[0], content = _a[1];
            this.queue(new File({
                base: base,
                path: path.join(base, 'nls.metadata.header.json'),
                contents: new Buffer(JSON.stringify(header), 'utf8')
            }));
            this.queue(new File({
                base: base,
                path: path.join(base, 'nls.metadata.json'),
                contents: new Buffer(JSON.stringify(content), 'utf8')
            }));
        }
        this.queue(null);
    });
}
exports.bundleMetaDataFiles = bundleMetaDataFiles;
function createAdditionalLanguageFiles(languages, i18nBaseDir, baseDir) {
    return event_stream_1.through(function (file) {
        var _this = this;
        // Queue the original file again.
        this.queue(file);
        var basename = path.basename(file.relative);
        var isPackageFile = basename === 'package.nls.json';
        var isAffected = isPackageFile || basename.match(/nls.metadata.json$/) !== null;
        if (!isAffected) {
            return;
        }
        var filename = isPackageFile
            ? file.relative.substr(0, file.relative.length - '.nls.json'.length)
            : file.relative.substr(0, file.relative.length - NLS_METADATA_JSON.length);
        var json;
        if (file.isBuffer()) {
            var buffer = file.contents;
            json = JSON.parse(buffer.toString('utf8'));
            var resolvedBundle_1 = lib_1.resolveMessageBundle(json);
            languages.forEach(function (language) {
                var folderName = language.folderName || language.id;
                var result = lib_1.createLocalizedMessages(filename, resolvedBundle_1, folderName, i18nBaseDir, baseDir);
                if (result.problems && result.problems.length > 0) {
                    result.problems.forEach(function (problem) { return log(problem); });
                }
                if (result.messages) {
                    _this.queue(new File({
                        base: file.base,
                        path: path.join(file.base, filename) + '.nls.' + language.id + '.json',
                        contents: new Buffer(JSON.stringify(result.messages, null, '\t').replace(/\r\n/g, '\n'), 'utf8')
                    }));
                }
            });
        }
        else {
            this.emit('error', "Failed to read component file: " + file.relative);
            return;
        }
    });
}
exports.createAdditionalLanguageFiles = createAdditionalLanguageFiles;
function bundleLanguageFiles() {
    ;
    var bundles = Object.create(null);
    function getModuleKey(relativeFile) {
        return relativeFile.match(/(.*)\.nls\.(?:.*\.)?json/)[1].replace(/\\/g, '/');
    }
    return event_stream_1.through(function (file) {
        var basename = path.basename(file.path);
        var matches = basename.match(/.nls\.(?:(.*)\.)?json/);
        if (!matches || !file.isBuffer()) {
            // Not an nls file.
            this.queue(file);
            return;
        }
        var language = matches[1] ? matches[1] : 'en';
        var bundle = bundles[language];
        if (!bundle) {
            bundle = {
                base: file.base,
                content: Object.create(null)
            };
            bundles[language] = bundle;
        }
        bundle.content[getModuleKey(file.relative)] = JSON.parse(file.contents.toString('utf8'));
    }, function () {
        for (var language in bundles) {
            var bundle = bundles[language];
            var languageId = language === 'en' ? '' : language + ".";
            var file = new File({
                base: bundle.base,
                path: path.join(bundle.base, "nls.bundle." + languageId + "json"),
                contents: new Buffer(JSON.stringify(bundle.content), 'utf8')
            });
            this.queue(file);
        }
        this.queue(null);
    });
}
exports.bundleLanguageFiles = bundleLanguageFiles;
function debug(prefix) {
    if (prefix === void 0) { prefix = ''; }
    return event_stream_1.through(function (file) {
        console.log(prefix + "In pipe " + file.path);
        this.queue(file);
    });
}
exports.debug = debug;
/**
 * A stream the creates additional key/value pair files for structured nls files.
 *
 * @param commentSeparator - if provided comments will be joined into one string using
 *  the commentSeparator value. If omitted comments will be includes as a string array.
 */
function createKeyValuePairFile(commentSeparator) {
    if (commentSeparator === void 0) { commentSeparator = undefined; }
    return event_stream_1.through(function (file) {
        var basename = path.basename(file.relative);
        if (basename.length < NLS_METADATA_JSON.length || NLS_METADATA_JSON !== basename.substr(basename.length - NLS_METADATA_JSON.length)) {
            this.queue(file);
            return;
        }
        var json;
        var kvpFile;
        var filename = file.relative.substr(0, file.relative.length - NLS_METADATA_JSON.length);
        if (file.isBuffer()) {
            var buffer = file.contents;
            json = JSON.parse(buffer.toString('utf8'));
            if (lib_1.JavaScriptMessageBundle.is(json)) {
                var resolvedBundle = json;
                if (resolvedBundle.messages.length !== resolvedBundle.keys.length) {
                    this.queue(file);
                    return;
                }
                var kvpObject = lib_1.bundle2keyValuePair(resolvedBundle, commentSeparator);
                kvpFile = new File({
                    base: file.base,
                    path: path.join(file.base, filename) + I18N_JSON,
                    contents: new Buffer(JSON.stringify(kvpObject, null, '\t'), 'utf8')
                });
            }
            else {
                this.emit('error', "Not a valid JavaScript message bundle: " + file.relative);
                return;
            }
        }
        else {
            this.emit('error', "Failed to read JavaScript message bundle file: " + file.relative);
            return;
        }
        this.queue(file);
        if (kvpFile) {
            this.queue(kvpFile);
        }
    });
}
exports.createKeyValuePairFile = createKeyValuePairFile;
var LocalizeInfo;
(function (LocalizeInfo) {
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.key) && (Is.undef(candidate.comment) || (Is.array(candidate.comment) && candidate.comment.every(function (element) { return Is.string(element); })));
    }
    LocalizeInfo.is = is;
})(LocalizeInfo || (LocalizeInfo = {}));
var PackageJsonFormat;
(function (PackageJsonFormat) {
    function is(value) {
        if (Is.undef(value) || !Is.object(value)) {
            return false;
        }
        return Object.keys(value).every(function (key) {
            var element = value[key];
            return Is.string(element) || (Is.object(element) && Is.defined(element.message) && Is.defined(element.comment));
        });
    }
    PackageJsonFormat.is = is;
})(PackageJsonFormat || (PackageJsonFormat = {}));
var ModuleJsonFormat;
(function (ModuleJsonFormat) {
    function is(value) {
        var candidate = value;
        return Is.defined(candidate)
            && Is.array(candidate.messages) && candidate.messages.every(function (message) { return Is.string(message); })
            && Is.array(candidate.keys) && candidate.keys.every(function (key) { return Is.string(key) || LocalizeInfo.is(key); });
    }
    ModuleJsonFormat.is = is;
})(ModuleJsonFormat || (ModuleJsonFormat = {}));
var Line = /** @class */ (function () {
    function Line(indent) {
        if (indent === void 0) { indent = 0; }
        this.indent = indent;
        this.buffer = [];
        if (indent > 0) {
            this.buffer.push(new Array(indent + 1).join(' '));
        }
    }
    Line.prototype.append = function (value) {
        this.buffer.push(value);
        return this;
    };
    Line.prototype.toString = function () {
        return this.buffer.join('');
    };
    return Line;
}());
exports.Line = Line;
var XLF = /** @class */ (function () {
    function XLF(project) {
        this.project = project;
        this.buffer = [];
        this.files = Object.create(null);
    }
    XLF.prototype.toString = function () {
        this.appendHeader();
        for (var file in this.files) {
            this.appendNewLine("<file original=\"" + file + "\" source-language=\"en\" datatype=\"plaintext\"><body>", 2);
            for (var _i = 0, _a = this.files[file]; _i < _a.length; _i++) {
                var item = _a[_i];
                this.addStringItem(item);
            }
            this.appendNewLine('</body></file>', 2);
        }
        this.appendFooter();
        return this.buffer.join('\r\n');
    };
    XLF.prototype.addFile = function (original, keys, messages) {
        if (keys.length === 0) {
            return;
        }
        if (keys.length !== messages.length) {
            throw new Error("Unmatching keys(" + keys.length + ") and messages(" + messages.length + ").");
        }
        this.files[original] = [];
        var existingKeys = [];
        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
            var key = keys_1[_i];
            // Ignore duplicate keys because Transifex does not populate those with translated values.
            if (existingKeys.indexOf(key) !== -1) {
                continue;
            }
            existingKeys.push(key);
            var message = encodeEntities(messages[keys.indexOf(key)]);
            var comment = undefined;
            // Check if the message contains description (if so, it becomes an object type in JSON)
            if (Is.string(key)) {
                this.files[original].push({ id: key, message: message, comment: comment });
            }
            else {
                if (key['comment'] && key['comment'].length > 0) {
                    comment = key['comment'].map(function (comment) { return encodeEntities(comment); }).join('\r\n');
                }
                this.files[original].push({ id: key['key'], message: message, comment: comment });
            }
        }
    };
    XLF.prototype.addStringItem = function (item) {
        if (!item.id || !item.message) {
            throw new Error('No item ID or value specified.');
        }
        this.appendNewLine("<trans-unit id=\"" + item.id + "\">", 4);
        this.appendNewLine("<source xml:lang=\"en\">" + item.message + "</source>", 6);
        if (item.comment) {
            this.appendNewLine("<note>" + item.comment + "</note>", 6);
        }
        this.appendNewLine('</trans-unit>', 4);
    };
    XLF.prototype.appendHeader = function () {
        this.appendNewLine('<?xml version="1.0" encoding="utf-8"?>', 0);
        this.appendNewLine('<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2">', 0);
    };
    XLF.prototype.appendFooter = function () {
        this.appendNewLine('</xliff>', 0);
    };
    XLF.prototype.appendNewLine = function (content, indent) {
        var line = new Line(indent);
        line.append(content);
        this.buffer.push(line.toString());
    };
    XLF.parse = function (xlfString) {
        var getValue = function (target) {
            if (typeof target === 'string') {
                return target;
            }
            if (typeof target._ === 'string') {
                return target._;
            }
            if (Array.isArray(target) && target.length === 1) {
                var item = target[0];
                if (typeof item === 'string') {
                    return item;
                }
                if (typeof item._ === 'string') {
                    return item._;
                }
                return target[0]._;
            }
            return undefined;
        };
        return new Promise(function (resolve, reject) {
            var parser = new xml2js.Parser();
            var files = [];
            parser.parseString(xlfString, function (err, result) {
                if (err) {
                    reject(new Error("Failed to parse XLIFF string. " + err));
                }
                var fileNodes = result['xliff']['file'];
                if (!fileNodes) {
                    reject(new Error('XLIFF file does not contain "xliff" or "file" node(s) required for parsing.'));
                }
                fileNodes.forEach(function (file) {
                    var originalFilePath = file.$.original;
                    if (!originalFilePath) {
                        reject(new Error('XLIFF file node does not contain original attribute to determine the original location of the resource file.'));
                    }
                    var language = file.$['target-language'].toLowerCase();
                    if (!language) {
                        reject(new Error('XLIFF file node does not contain target-language attribute to determine translated language.'));
                    }
                    var messages = {};
                    var transUnits = file.body[0]['trans-unit'];
                    if (transUnits) {
                        transUnits.forEach(function (unit) {
                            var key = unit.$.id;
                            if (!unit.target) {
                                return; // No translation available
                            }
                            var val = getValue(unit.target);
                            if (key && val) {
                                messages[key] = decodeEntities(val);
                            }
                            else {
                                reject(new Error('XLIFF file does not contain full localization data. ID or target translation for one of the trans-unit nodes is not present.'));
                            }
                        });
                        files.push({ messages: messages, originalFilePath: originalFilePath, language: language });
                    }
                });
                resolve(files);
            });
        });
    };
    ;
    return XLF;
}());
exports.XLF = XLF;
function createXlfFiles(projectName, extensionName) {
    var _xlf;
    var header;
    var data;
    function getXlf() {
        if (!_xlf) {
            _xlf = new XLF(projectName);
        }
        return _xlf;
    }
    return event_stream_1.through(function (file) {
        if (!file.isBuffer()) {
            this.emit('error', "File " + file.path + " is not a buffer");
            return;
        }
        var buffer = file.contents;
        var basename = path.basename(file.path);
        if (basename === 'package.nls.json') {
            var json_1 = JSON.parse(buffer.toString('utf8'));
            var keys = Object.keys(json_1);
            var messages = keys.map(function (key) {
                var value = json_1[key];
                if (Is.string(value)) {
                    return value;
                }
                else if (value) {
                    return value.message;
                }
                else {
                    return "Unknown message for key: " + key;
                }
            });
            getXlf().addFile('package', keys, messages);
        }
        else if (basename === 'nls.metadata.json') {
            data = JSON.parse(buffer.toString('utf8'));
        }
        else if (basename === 'nls.metadata.header.json') {
            header = JSON.parse(buffer.toString('utf8'));
        }
        else {
            this.emit('error', new Error(file.path + " is not a valid nls or meta data file"));
            return;
        }
    }, function () {
        if (header && data) {
            var outDir = header.outDir;
            for (var module_1 in data) {
                var fileContent = data[module_1];
                // in the XLF files we only use forward slashes.
                getXlf().addFile(outDir + "/" + module_1.replace(/\\/g, '/'), fileContent.keys, fileContent.messages);
            }
        }
        if (_xlf) {
            var xlfFile = new File({
                path: path.join(projectName, extensionName + '.xlf'),
                contents: new Buffer(_xlf.toString(), 'utf8')
            });
            this.queue(xlfFile);
        }
        this.queue(null);
    });
}
exports.createXlfFiles = createXlfFiles;
function pushXlfFiles(apiHostname, username, password) {
    var tryGetPromises = [];
    var updateCreatePromises = [];
    return event_stream_1.through(function (file) {
        var project = path.dirname(file.relative);
        var fileName = path.basename(file.path);
        var slug = fileName.substr(0, fileName.length - '.xlf'.length);
        var credentials = username + ":" + password;
        // Check if resource already exists, if not, then create it.
        var promise = tryGetResource(project, slug, apiHostname, credentials);
        tryGetPromises.push(promise);
        promise.then(function (exists) {
            if (exists) {
                promise = updateResource(project, slug, file, apiHostname, credentials);
            }
            else {
                promise = createResource(project, slug, file, apiHostname, credentials);
            }
            updateCreatePromises.push(promise);
        });
    }, function () {
        var _this = this;
        // End the pipe only after all the communication with Transifex API happened
        Promise.all(tryGetPromises).then(function () {
            Promise.all(updateCreatePromises).then(function () {
                _this.queue(null);
            }).catch(function (reason) { throw new Error(reason); });
        }).catch(function (reason) { throw new Error(reason); });
    });
}
exports.pushXlfFiles = pushXlfFiles;
function tryGetResource(project, slug, apiHostname, credentials) {
    return new Promise(function (resolve, reject) {
        var options = {
            hostname: apiHostname,
            path: "/api/2/project/" + project + "/resource/" + slug + "/?details",
            auth: credentials,
            method: 'GET'
        };
        var request = https.request(options, function (response) {
            if (response.statusCode === 404) {
                resolve(false);
            }
            else if (response.statusCode === 200) {
                resolve(true);
            }
            else {
                reject("Failed to query resource " + project + "/" + slug + ". Response: " + response.statusCode + " " + response.statusMessage);
            }
        });
        request.on('error', function (err) {
            reject("Failed to get " + project + "/" + slug + " on Transifex: " + err);
        });
        request.end();
    });
}
function createResource(project, slug, xlfFile, apiHostname, credentials) {
    return new Promise(function (resolve, reject) {
        var data = JSON.stringify({
            'content': xlfFile.contents.toString(),
            'name': slug,
            'slug': slug,
            'i18n_type': 'XLIFF'
        });
        var options = {
            hostname: apiHostname,
            path: "/api/2/project/" + project + "/resources",
            headers: {
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(data)
            },
            auth: credentials,
            method: 'POST'
        };
        var request = https.request(options, function (res) {
            if (res.statusCode === 201) {
                log("Resource " + project + "/" + slug + " successfully created on Transifex.");
            }
            else {
                reject("Something went wrong in the request creating " + slug + " in " + project + ". " + res.statusCode);
            }
        });
        request.on('error', function (err) {
            reject("Failed to create " + project + "/" + slug + " on Transifex: " + err);
        });
        request.write(data);
        request.end();
    });
}
/**
 * The following link provides information about how Transifex handles updates of a resource file:
 * https://dev.befoolish.co/tx-docs/public/projects/updating-content#what-happens-when-you-update-files
 */
function updateResource(project, slug, xlfFile, apiHostname, credentials) {
    return new Promise(function (resolve, reject) {
        var data = JSON.stringify({ content: xlfFile.contents.toString() });
        var options = {
            hostname: apiHostname,
            path: "/api/2/project/" + project + "/resource/" + slug + "/content",
            headers: {
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(data)
            },
            auth: credentials,
            method: 'PUT'
        };
        var request = https.request(options, function (res) {
            if (res.statusCode === 200) {
                res.setEncoding('utf8');
                var responseBuffer_1 = '';
                res.on('data', function (chunk) {
                    responseBuffer_1 += chunk;
                });
                res.on('end', function () {
                    var response = JSON.parse(responseBuffer_1);
                    log("Resource " + project + "/" + slug + " successfully updated on Transifex. Strings added: " + response.strings_added + ", updated: " + response.strings_added + ", deleted: " + response.strings_added);
                    resolve();
                });
            }
            else {
                reject("Something went wrong in the request updating " + slug + " in " + project + ". " + res.statusCode);
            }
        });
        request.on('error', function (err) {
            reject("Failed to update " + project + "/" + slug + " on Transifex: " + err);
        });
        request.write(data);
        request.end();
    });
}
/**
 * Fetches a Xlf file from transifex. Returns a file stream with paths `${project}/${slug}.xlf`
 *
 * @param apiHostname The hostname, e.g. www.transifex.com
 * @param username The user name, e.g. api
 * @param password The password or access token
 * @param language The language used to pull.
 * @param resources The list of resources to fetch
 */
function pullXlfFiles(apiHostname, username, password, language, resources) {
    if (!resources) {
        throw new Error('Transifex projects and resources must be defined to be able to pull translations from Transifex.');
    }
    var credentials = username + ":" + password;
    var expectedTranslationsCount = resources.length;
    var translationsRetrieved = 0, called = false;
    return event_stream_1.readable(function (count, callback) {
        // Mark end of stream when all resources were retrieved
        if (translationsRetrieved === expectedTranslationsCount) {
            return this.emit('end');
        }
        if (!called) {
            called = true;
            var stream_1 = this;
            resources.map(function (resource) {
                retrieveResource(language, resource, apiHostname, credentials).then(function (file) {
                    stream_1.emit('data', file);
                    translationsRetrieved++;
                }).catch(function (error) { throw new Error(error); });
            });
        }
        callback();
    });
}
exports.pullXlfFiles = pullXlfFiles;
function retrieveResource(language, resource, apiHostname, credentials) {
    return new Promise(function (resolve, reject) {
        var slug = resource.name.replace(/\//g, '_');
        var project = resource.project;
        var transifexLanguageId = language.transifexId || language.id;
        var options = {
            hostname: apiHostname,
            path: "/api/2/project/" + project + "/resource/" + slug + "/translation/" + transifexLanguageId + "?file&mode=onlyreviewed",
            auth: credentials,
            method: 'GET'
        };
        var request = https.request(options, function (res) {
            var xlfBuffer = [];
            res.on('data', function (chunk) { return xlfBuffer.push(chunk); });
            res.on('end', function () {
                if (res.statusCode === 200) {
                    resolve(new File({ contents: Buffer.concat(xlfBuffer), path: project + "/" + slug + ".xlf" }));
                }
                reject(slug + " in " + project + " returned no data. Response code: " + res.statusCode + ".");
            });
        });
        request.on('error', function (err) {
            reject("Failed to query resource " + slug + " with the following error: " + err);
        });
        request.end();
    });
}
function prepareJsonFiles() {
    var parsePromises = [];
    return event_stream_1.through(function (xlf) {
        var stream = this;
        var parsePromise = XLF.parse(xlf.contents.toString());
        parsePromises.push(parsePromise);
        parsePromise.then(function (resolvedFiles) {
            resolvedFiles.forEach(function (file) {
                var messages = file.messages, translatedFile;
                translatedFile = createI18nFile(file.originalFilePath, messages);
                stream.queue(translatedFile);
            });
        });
    }, function () {
        var _this = this;
        Promise.all(parsePromises)
            .then(function () { _this.queue(null); })
            .catch(function (reason) { throw new Error(reason); });
    });
}
exports.prepareJsonFiles = prepareJsonFiles;
function createI18nFile(originalFilePath, messages) {
    var content = [
        '/*---------------------------------------------------------------------------------------------',
        ' *  Copyright (c) Microsoft Corporation. All rights reserved.',
        ' *  Licensed under the MIT License. See License.txt in the project root for license information.',
        ' *--------------------------------------------------------------------------------------------*/',
        '// Do not edit this file. It is machine generated.'
    ].join('\n') + '\n' + JSON.stringify(messages, null, '\t').replace(/\r\n/g, '\n');
    return new File({
        path: path.join(originalFilePath + '.i18n.json'),
        contents: new Buffer(content, 'utf8')
    });
}
function encodeEntities(value) {
    var result = [];
    for (var i = 0; i < value.length; i++) {
        var ch = value[i];
        switch (ch) {
            case '<':
                result.push('&lt;');
                break;
            case '>':
                result.push('&gt;');
                break;
            case '&':
                result.push('&amp;');
                break;
            default:
                result.push(ch);
        }
    }
    return result.join('');
}
function decodeEntities(value) {
    return value.replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, '&');
}
//# sourceMappingURL=main.js.map