/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
'use strict';
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var path_1 = require("path");
var lib_1 = require("./lib");
var path = require("path");
/**
 * A [webpack loader](https://webpack.js.org/api/loaders/) that rewrite nls-calls.
 */
module.exports = function (content, map, meta) {
    console.assert(this.query && typeof this.query.base === 'string', 'Expected {base: string} option');
    var callback = this.async();
    var relativePath = path_1.relative(this.query.base, this.resourcePath);
    var result = lib_1.processFile(content, relativePath, map);
    if (result.errors && result.errors.length > 0) {
        // error
        callback(new Error(result.errors.join()));
        return;
    }
    if (result.bundle) {
        var ext = path.extname(relativePath);
        var base = relativePath.substr(0, relativePath.length - ext.length);
        var metaDataContent = __assign(__assign({}, result.bundle), { filePath: lib_1.removePathPrefix(base, this.query.base) });
        // this.emitFile(`${base}.nls.json`, JSON.stringify(result.bundle.messages, null, '\t'), 'utf8');
        this.emitFile(base + ".nls.metadata.json", JSON.stringify(metaDataContent, null, '\t'), 'utf8');
    }
    if (!result.contents) {
        // nothing
        callback(null, content, map, meta);
    }
    else {
        // result
        callback(null, result.contents, result.sourceMap, meta);
    }
};
//# sourceMappingURL=webpack-loader.js.map